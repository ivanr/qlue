<form method=POST action="">
<code>
Template:<br>
<textarea name=_template cols=128 rows=24>
<html>
<head>

<title>Page title</title>

</head>

@a

<script>
document.write(@b);
</script>

@c

</body>
</html>
</textarea><br>
<br>
a: <input type=text name=a size=64 value="One"><br>
b: <input type=text name=b size=64 value="Two"><br>
c: <input type=text name=c size=64 value="Three"><br>
<br>
<input type=submit>
</form>
</code>

<hr>

This page is a demo for the proof of concept of context-aware output encoding. The idea is
to handle output encoding automatically and transparently to the programmer.

<br><br>

The code is supposed to correctly encode HTML, JavaScript, and URLs, but refuse to output
into any other context (for example, CSS). Malformed templates may be rejected.

<br><br> 

Instructions:
<ol>
<li>Change the template in any way you want
<li>Put XSS payload in any of the three fields
<li>When you submit page, the @a, @b, and @c placeholders will be replaced with the actual parameter values
<li>You win if you you manage to activate the submitted payload
</ol>

Be aware that attackers will only control attack payload whereas
you have full control over both the payload and the template. Still, we want to
make the parser foolproof because the idea is, after all, to have something that works 100% of the time.

<br><br>
<b>Important:</b> Inclusion of external context (e.g., via &lt;script src=...&gt;) is not currently
covered. At this stage the focus is on preventing payload execution in the _same_ page. I'll add other stuff later.


